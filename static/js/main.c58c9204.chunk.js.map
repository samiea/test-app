{"version":3,"sources":["logo.svg","serviceWorker.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","startCarbonDioxide","carbonArray","console","log","co2","length","startMethane","methArray","methane","startNitrous","nitArray","nitrous","Enviorment","fetchData","getApibyUrl","a","url","dataFunction","axios","get","then","response","data","catch","err","className","onClick","rootElement","document","getElementById","ReactDOM","render"],"mappings":"sGAAAA,EAAOC,QAAU,IAA0B,kC,oMCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,qBCVFC,EAAmB,SAASC,GAG9B,OAFAC,QAAQC,IAAIF,EAAYG,IAAI,MAC5BF,QAAQC,IAAIF,EAAYG,IAAIC,QACrBJ,GAGLK,EAAa,SAASC,GAGxB,OAFAL,QAAQC,IAAII,EAAUC,QAAQ,MAC9BN,QAAQC,IAAII,EAAUC,QAAQH,QACvBE,GAGLE,EAAa,SAASC,GAGxB,OAFAR,QAAQC,IAAIO,EAASC,QAAQ,MAC7BT,QAAQC,IAAIO,EAASC,QAAQN,QACtBK,GAIT,SAASE,IAIP,IAAMC,EAAS,uCAAG,iBAEPC,EAFO,SAAAC,EAAA,uDAEPD,EAFO,SAEKE,EAAKC,GAITC,IAAMC,IAFJ,uCAGNH,GACTI,MAAK,SAASC,GAEZ,OADAnB,QAAQC,IAAIkB,EAASC,MACdL,EAAaI,EAASC,SAC9BC,OAAM,SAAAC,GAEPtB,QAAQC,IAAIqB,QAKN,yCACyBxB,GAIfc,EADd,6CAC8BR,GAIrBQ,EADT,mDACyBL,GAGzB,iDAGA,4CAjCU,2CAAH,qDAqCf,OACI,yBAAKgB,UAAU,OACb,2CACA,uEAFF,4BAKE,6BACE,4BAAQA,UAAU,eAAeC,QAASb,GAA1C,cAIA,+BASV,IAAMc,EAAcC,SAASC,eAAe,QAE5CC,IAASC,OAAO,kBAACnB,EAAD,MAAgBe,K","file":"static/js/main.c58c9204.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport axios from 'axios';\n\n\nvar startCarbonDioxide=function(carbonArray){\n  console.log(carbonArray.co2[100]);\n  console.log(carbonArray.co2.length)\n  return carbonArray\n\n}\nvar startMethane=function(methArray){\n  console.log(methArray.methane[100]);\n  console.log(methArray.methane.length)\n  return methArray\n\n}\nvar startNitrous=function(nitArray){\n  console.log(nitArray.nitrous[100]);\n  console.log(nitArray.nitrous.length)\n  return nitArray\n\n}\n\nfunction Enviorment() {\n\n  //const  [carbonDioxide, setCarbonDioxide] = useState(null);\n\n  const fetchData = async () => {\n\n    function getApibyUrl(url, dataFunction){\n\n      const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n\n      var response = axios.get(\n        proxyurl+url\n      ).then(function(response){\n          console.log(response.data)\n          return dataFunction(response.data)\n      }).catch(err => {\n          // what now?\n        console.log(err);\n      });\n\n    }\n    //Air\n    var url = 'https://global-warming.org/api/co2-api'\n    const carbonData = getApibyUrl(url,startCarbonDioxide)\n    //console.log(carbonData);\n\n    url = 'https://global-warming.org/api/methane-api'\n    var responseData =  getApibyUrl(url,startMethane)\n    //console.log(responseData.result);\n\n    url = 'https://global-warming.org/api/nitrous-oxide-api'\n    responseData = getApibyUrl(url,startNitrous)\n    //console.log(responseData.result);\n    //surface temperature\n    url = 'https://global-warming.org/api/temperature-api'\n    //responseData = getApibyUrl(url.result)\n    //arctic ice\n    url = 'https://global-warming.org/api/arctic-api'\n    //responseData = getApibyUrl(url result)\n  };\n\n  return (\n      <div className=\"App\">\n        <h1>Air Quality</h1>\n        <h2>Fetch a list from an API and display it</h2>\n\n        /* Fetch data from API */\n        <div>\n          <button className=\"fetch-button\" onClick={fetchData}>\n            Fetch Data\n          </button>\n\n          <br />\n        </div>\n\n      </div>\n  );\n}\n\n//start application\n\nconst rootElement = document.getElementById('root');\n\nReactDOM.render(<Enviorment />, rootElement);\n"],"sourceRoot":""}